/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrk.jooq.tables;


import gov.nist.csrk.jooq.DefaultSchema;
import gov.nist.csrk.jooq.Keys;
import gov.nist.csrk.jooq.tables.records.RelatedsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Relateds extends TableImpl<RelatedsRecord> {

    private static final long serialVersionUID = 345009537;

    /**
     * The reference instance of <code>Relateds</code>
     */
    public static final Relateds RELATEDS = new Relateds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelatedsRecord> getRecordType() {
        return RelatedsRecord.class;
    }

    /**
     * The column <code>Relateds.Id</code>.
     */
    public final TableField<RelatedsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Relateds.ParentId</code>.
     */
    public final TableField<RelatedsRecord, Integer> PARENTID = createField("ParentId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Relateds.ChildID</code>.
     */
    public final TableField<RelatedsRecord, Integer> CHILDID = createField("ChildID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>Relateds</code> table reference
     */
    public Relateds() {
        this(DSL.name("Relateds"), null);
    }

    /**
     * Create an aliased <code>Relateds</code> table reference
     */
    public Relateds(String alias) {
        this(DSL.name(alias), RELATEDS);
    }

    /**
     * Create an aliased <code>Relateds</code> table reference
     */
    public Relateds(Name alias) {
        this(alias, RELATEDS);
    }

    private Relateds(Name alias, Table<RelatedsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Relateds(Name alias, Table<RelatedsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RelatedsRecord> getPrimaryKey() {
        return Keys.PK_RELATEDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RelatedsRecord>> getKeys() {
        return Arrays.<UniqueKey<RelatedsRecord>>asList(Keys.PK_RELATEDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RelatedsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RelatedsRecord, ?>>asList(Keys.FK_RELATEDS_CONTROLS_2, Keys.FK_RELATEDS_CONTROLS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Relateds as(String alias) {
        return new Relateds(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Relateds as(Name alias) {
        return new Relateds(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Relateds rename(String name) {
        return new Relateds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Relateds rename(Name name) {
        return new Relateds(name, null);
    }
}
