/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrk.jooq.tables;


import gov.nist.csrk.jooq.DefaultSchema;
import gov.nist.csrk.jooq.Keys;
import gov.nist.csrk.jooq.tables.records.CapabilitiesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Capabilities extends TableImpl<CapabilitiesRecord> {

    private static final long serialVersionUID = 2012419044;

    /**
     * The reference instance of <code>Capabilities</code>
     */
    public static final Capabilities CAPABILITIES = new Capabilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CapabilitiesRecord> getRecordType() {
        return CapabilitiesRecord.class;
    }

    /**
     * The column <code>Capabilities.Id</code>.
     */
    public final TableField<CapabilitiesRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Capabilities.Domain</code>.
     */
    public final TableField<CapabilitiesRecord, String> DOMAIN = createField("Domain", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.Container</code>.
     */
    public final TableField<CapabilitiesRecord, String> CONTAINER = createField("Container", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.Capability</code>.
     */
    public final TableField<CapabilitiesRecord, String> CAPABILITY = createField("Capability", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.Capability2</code>.
     */
    public final TableField<CapabilitiesRecord, String> CAPABILITY2 = createField("Capability2", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.UniqueId</code>.
     */
    public final TableField<CapabilitiesRecord, String> UNIQUEID = createField("UniqueId", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.Description</code>.
     */
    public final TableField<CapabilitiesRecord, String> DESCRIPTION = createField("Description", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.CSADescription</code>.
     */
    public final TableField<CapabilitiesRecord, String> CSADESCRIPTION = createField("CSADescription", org.jooq.impl.SQLDataType.CHAR(8000), this, "");

    /**
     * The column <code>Capabilities.Notes</code>.
     */
    public final TableField<CapabilitiesRecord, String> NOTES = createField("Notes", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.Scopes</code>.
     */
    public final TableField<CapabilitiesRecord, String> SCOPES = createField("Scopes", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.C</code>.
     */
    public final TableField<CapabilitiesRecord, Integer> C = createField("C", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Capabilities.I</code>.
     */
    public final TableField<CapabilitiesRecord, Integer> I = createField("I", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Capabilities.A</code>.
     */
    public final TableField<CapabilitiesRecord, Integer> A = createField("A", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Capabilities.ResponsibilityVector</code>.
     */
    public final TableField<CapabilitiesRecord, String> RESPONSIBILITYVECTOR = createField("ResponsibilityVector", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Capabilities.OtherActors</code>.
     */
    public final TableField<CapabilitiesRecord, String> OTHERACTORS = createField("OtherActors", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * Create a <code>Capabilities</code> table reference
     */
    public Capabilities() {
        this(DSL.name("Capabilities"), null);
    }

    /**
     * Create an aliased <code>Capabilities</code> table reference
     */
    public Capabilities(String alias) {
        this(DSL.name(alias), CAPABILITIES);
    }

    /**
     * Create an aliased <code>Capabilities</code> table reference
     */
    public Capabilities(Name alias) {
        this(alias, CAPABILITIES);
    }

    private Capabilities(Name alias, Table<CapabilitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Capabilities(Name alias, Table<CapabilitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CapabilitiesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CAPABILITIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CapabilitiesRecord> getPrimaryKey() {
        return Keys.PK_CAPABILITIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CapabilitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<CapabilitiesRecord>>asList(Keys.PK_CAPABILITIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Capabilities as(String alias) {
        return new Capabilities(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Capabilities as(Name alias) {
        return new Capabilities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Capabilities rename(String name) {
        return new Capabilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Capabilities rename(Name name) {
        return new Capabilities(name, null);
    }
}
