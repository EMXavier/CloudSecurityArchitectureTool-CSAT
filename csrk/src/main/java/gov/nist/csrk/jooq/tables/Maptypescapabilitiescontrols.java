/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrk.jooq.tables;


import gov.nist.csrk.jooq.DefaultSchema;
import gov.nist.csrk.jooq.Keys;
import gov.nist.csrk.jooq.tables.records.MaptypescapabilitiescontrolsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maptypescapabilitiescontrols extends TableImpl<MaptypescapabilitiescontrolsRecord> {

    private static final long serialVersionUID = -2081849313;

    /**
     * The reference instance of <code>MapTypesCapabilitiesControls</code>
     */
    public static final Maptypescapabilitiescontrols MAPTYPESCAPABILITIESCONTROLS = new Maptypescapabilitiescontrols();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaptypescapabilitiescontrolsRecord> getRecordType() {
        return MaptypescapabilitiescontrolsRecord.class;
    }

    /**
     * The column <code>MapTypesCapabilitiesControls.Id</code>.
     */
    public final TableField<MaptypescapabilitiescontrolsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MapTypesCapabilitiesControls.CapabilitiesId</code>.
     */
    public final TableField<MaptypescapabilitiescontrolsRecord, Integer> CAPABILITIESID = createField("CapabilitiesId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MapTypesCapabilitiesControls.ControlsId</code>.
     */
    public final TableField<MaptypescapabilitiescontrolsRecord, Integer> CONTROLSID = createField("ControlsId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MapTypesCapabilitiesControls.MapTypesId</code>.
     */
    public final TableField<MaptypescapabilitiescontrolsRecord, Integer> MAPTYPESID = createField("MapTypesId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MapTypesCapabilitiesControls.SpecsId</code>.
     */
    public final TableField<MaptypescapabilitiescontrolsRecord, Integer> SPECSID = createField("SpecsId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MapTypesCapabilitiesControls.IsControlMap</code>.
     */
    public final TableField<MaptypescapabilitiescontrolsRecord, Boolean> ISCONTROLMAP = createField("IsControlMap", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>MapTypesCapabilitiesControls</code> table reference
     */
    public Maptypescapabilitiescontrols() {
        this(DSL.name("MapTypesCapabilitiesControls"), null);
    }

    /**
     * Create an aliased <code>MapTypesCapabilitiesControls</code> table reference
     */
    public Maptypescapabilitiescontrols(String alias) {
        this(DSL.name(alias), MAPTYPESCAPABILITIESCONTROLS);
    }

    /**
     * Create an aliased <code>MapTypesCapabilitiesControls</code> table reference
     */
    public Maptypescapabilitiescontrols(Name alias) {
        this(alias, MAPTYPESCAPABILITIESCONTROLS);
    }

    private Maptypescapabilitiescontrols(Name alias, Table<MaptypescapabilitiescontrolsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Maptypescapabilitiescontrols(Name alias, Table<MaptypescapabilitiescontrolsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MaptypescapabilitiescontrolsRecord> getPrimaryKey() {
        return Keys.PK_MAPTYPESCAPABILITIESCONTROLS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MaptypescapabilitiescontrolsRecord>> getKeys() {
        return Arrays.<UniqueKey<MaptypescapabilitiescontrolsRecord>>asList(Keys.PK_MAPTYPESCAPABILITIESCONTROLS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MaptypescapabilitiescontrolsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MaptypescapabilitiescontrolsRecord, ?>>asList(Keys.FK_MAPTYPESCAPABILITIESCONTROLS_CAPABILITIES_1, Keys.FK_MAPTYPESCAPABILITIESCONTROLS_CONTROLS_1, Keys.FK_MAPTYPESCAPABILITIESCONTROLS_SPECS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Maptypescapabilitiescontrols as(String alias) {
        return new Maptypescapabilitiescontrols(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Maptypescapabilitiescontrols as(Name alias) {
        return new Maptypescapabilitiescontrols(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maptypescapabilitiescontrols rename(String name) {
        return new Maptypescapabilitiescontrols(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maptypescapabilitiescontrols rename(Name name) {
        return new Maptypescapabilitiescontrols(name, null);
    }
}
