/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrk.jooq.tables;


import gov.nist.csrk.jooq.DefaultSchema;
import gov.nist.csrk.jooq.Keys;
import gov.nist.csrk.jooq.tables.records.FamiliesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Families extends TableImpl<FamiliesRecord> {

    private static final long serialVersionUID = -781939476;

    /**
     * The reference instance of <code>Families</code>
     */
    public static final Families FAMILIES = new Families();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FamiliesRecord> getRecordType() {
        return FamiliesRecord.class;
    }

    /**
     * The column <code>Families.Id</code>.
     */
    public final TableField<FamiliesRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Families.Name</code>.
     */
    public final TableField<FamiliesRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Families.Description</code>.
     */
    public final TableField<FamiliesRecord, String> DESCRIPTION = createField("Description", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * Create a <code>Families</code> table reference
     */
    public Families() {
        this(DSL.name("Families"), null);
    }

    /**
     * Create an aliased <code>Families</code> table reference
     */
    public Families(String alias) {
        this(DSL.name(alias), FAMILIES);
    }

    /**
     * Create an aliased <code>Families</code> table reference
     */
    public Families(Name alias) {
        this(alias, FAMILIES);
    }

    private Families(Name alias, Table<FamiliesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Families(Name alias, Table<FamiliesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FamiliesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FAMILIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FamiliesRecord> getPrimaryKey() {
        return Keys.PK_FAMILIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FamiliesRecord>> getKeys() {
        return Arrays.<UniqueKey<FamiliesRecord>>asList(Keys.PK_FAMILIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Families as(String alias) {
        return new Families(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Families as(Name alias) {
        return new Families(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Families rename(String name) {
        return new Families(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Families rename(Name name) {
        return new Families(name, null);
    }
}
