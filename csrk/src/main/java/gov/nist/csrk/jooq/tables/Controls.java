/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrk.jooq.tables;


import gov.nist.csrk.jooq.DefaultSchema;
import gov.nist.csrk.jooq.Keys;
import gov.nist.csrk.jooq.tables.records.ControlsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Controls extends TableImpl<ControlsRecord> {

    private static final long serialVersionUID = 555307729;

    /**
     * The reference instance of <code>Controls</code>
     */
    public static final Controls CONTROLS = new Controls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ControlsRecord> getRecordType() {
        return ControlsRecord.class;
    }

    /**
     * The column <code>Controls.Id</code>.
     */
    public final TableField<ControlsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Controls.Name</code>.
     */
    public final TableField<ControlsRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Controls.BaselineId</code>.
     */
    public final TableField<ControlsRecord, Integer> BASELINEID = createField("BaselineId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Controls.FamilyId</code>.
     */
    public final TableField<ControlsRecord, Integer> FAMILYID = createField("FamilyId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Controls.PriorityId</code>.
     */
    public final TableField<ControlsRecord, Integer> PRIORITYID = createField("PriorityId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Controls.Description</code>.
     */
    public final TableField<ControlsRecord, String> DESCRIPTION = createField("Description", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Controls.Guidance</code>.
     */
    public final TableField<ControlsRecord, String> GUIDANCE = createField("Guidance", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * Create a <code>Controls</code> table reference
     */
    public Controls() {
        this(DSL.name("Controls"), null);
    }

    /**
     * Create an aliased <code>Controls</code> table reference
     */
    public Controls(String alias) {
        this(DSL.name(alias), CONTROLS);
    }

    /**
     * Create an aliased <code>Controls</code> table reference
     */
    public Controls(Name alias) {
        this(alias, CONTROLS);
    }

    private Controls(Name alias, Table<ControlsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Controls(Name alias, Table<ControlsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ControlsRecord> getPrimaryKey() {
        return Keys.PK_CONTROLS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ControlsRecord>> getKeys() {
        return Arrays.<UniqueKey<ControlsRecord>>asList(Keys.PK_CONTROLS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ControlsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ControlsRecord, ?>>asList(Keys.FK_CONTROLS_BASELINES_1, Keys.FK_CONTROLS_FAMILIES_1, Keys.FK_CONTROLS_PRIORITIES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Controls as(String alias) {
        return new Controls(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Controls as(Name alias) {
        return new Controls(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Controls rename(String name) {
        return new Controls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Controls rename(Name name) {
        return new Controls(name, null);
    }
}
