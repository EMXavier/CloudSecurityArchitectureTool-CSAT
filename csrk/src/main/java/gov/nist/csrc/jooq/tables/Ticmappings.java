/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrc.jooq.tables;


import gov.nist.csrc.jooq.DefaultSchema;
import gov.nist.csrc.jooq.Keys;
import gov.nist.csrc.jooq.tables.records.TicmappingsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticmappings extends TableImpl<TicmappingsRecord> {

    private static final long serialVersionUID = 1514095359;

    /**
     * The reference instance of <code>TICMappings</code>
     */
    public static final Ticmappings TICMAPPINGS = new Ticmappings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicmappingsRecord> getRecordType() {
        return TicmappingsRecord.class;
    }

    /**
     * The column <code>TICMappings.Id</code>.
     */
    public final TableField<TicmappingsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TICMappings.CapabilityId</code>.
     */
    public final TableField<TicmappingsRecord, Integer> CAPABILITYID = createField("CapabilityId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TICMappings.TICName</code>.
     */
    public final TableField<TicmappingsRecord, String> TICNAME = createField("TICName", org.jooq.impl.SQLDataType.CHAR(8000).nullable(false), this, "");

    /**
     * Create a <code>TICMappings</code> table reference
     */
    public Ticmappings() {
        this(DSL.name("TICMappings"), null);
    }

    /**
     * Create an aliased <code>TICMappings</code> table reference
     */
    public Ticmappings(String alias) {
        this(DSL.name(alias), TICMAPPINGS);
    }

    /**
     * Create an aliased <code>TICMappings</code> table reference
     */
    public Ticmappings(Name alias) {
        this(alias, TICMAPPINGS);
    }

    private Ticmappings(Name alias, Table<TicmappingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticmappings(Name alias, Table<TicmappingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TicmappingsRecord> getPrimaryKey() {
        return Keys.PK_TICMAPPINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TicmappingsRecord>> getKeys() {
        return Arrays.<UniqueKey<TicmappingsRecord>>asList(Keys.PK_TICMAPPINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TicmappingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TicmappingsRecord, ?>>asList(Keys.FK_TICMAPPINGS_CAPABILITIES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ticmappings as(String alias) {
        return new Ticmappings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ticmappings as(Name alias) {
        return new Ticmappings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticmappings rename(String name) {
        return new Ticmappings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticmappings rename(Name name) {
        return new Ticmappings(name, null);
    }
}
