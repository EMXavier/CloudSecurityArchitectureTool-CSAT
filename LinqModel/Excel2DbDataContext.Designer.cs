//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer for SQL Server tool using LINQ to SQL template.
// Code is generated on: 10/24/2017 11:50:26 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Context
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "ModelDb")]
    public partial class DataContext : System.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new System.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();

        partial void InsertCapabilities(Capabilities instance);
        partial void UpdateCapabilities(Capabilities instance);
        partial void DeleteCapabilities(Capabilities instance);
        partial void InsertControls(Controls instance);
        partial void UpdateControls(Controls instance);
        partial void DeleteControls(Controls instance);
        partial void InsertMapTypesCapabilitiesControls(MapTypesCapabilitiesControls instance);
        partial void UpdateMapTypesCapabilitiesControls(MapTypesCapabilitiesControls instance);
        partial void DeleteMapTypesCapabilitiesControls(MapTypesCapabilitiesControls instance);
        partial void InsertFamilies(Families instance);
        partial void UpdateFamilies(Families instance);
        partial void DeleteFamilies(Families instance);
        partial void InsertPriorities(Priorities instance);
        partial void UpdatePriorities(Priorities instance);
        partial void DeletePriorities(Priorities instance);
        partial void InsertBaselines(Baselines instance);
        partial void UpdateBaselines(Baselines instance);
        partial void DeleteBaselines(Baselines instance);
        partial void InsertSpecs(Specs instance);
        partial void UpdateSpecs(Specs instance);
        partial void DeleteSpecs(Specs instance);
        partial void InsertRelated(Related instance);
        partial void UpdateRelated(Related instance);
        partial void DeleteRelated(Related instance);
        partial void InsertTICMappings(TICMappings instance);
        partial void UpdateTICMappings(TICMappings instance);
        partial void DeleteTICMappings(TICMappings instance);
        partial void InsertBaselineSecurityMapping(BaselineSecurityMapping instance);
        partial void UpdateBaselineSecurityMapping(BaselineSecurityMapping instance);
        partial void DeleteBaselineSecurityMapping(BaselineSecurityMapping instance);

        #endregion

        public DataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataContext(System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName) 
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public System.Data.Linq.Table<Capabilities> Capabilities
        {
            get
            {
                return this.GetTable<Capabilities>();
            }
        }

        public System.Data.Linq.Table<Controls> Controls
        {
            get
            {
                return this.GetTable<Controls>();
            }
        }

        public System.Data.Linq.Table<MapTypesCapabilitiesControls> MapTypesCapabilitiesControls
        {
            get
            {
                return this.GetTable<MapTypesCapabilitiesControls>();
            }
        }

        public System.Data.Linq.Table<Families> Families
        {
            get
            {
                return this.GetTable<Families>();
            }
        }

        public System.Data.Linq.Table<Priorities> Priorities
        {
            get
            {
                return this.GetTable<Priorities>();
            }
        }

        public System.Data.Linq.Table<Baselines> Baselines
        {
            get
            {
                return this.GetTable<Baselines>();
            }
        }

        public System.Data.Linq.Table<Specs> Specs
        {
            get
            {
                return this.GetTable<Specs>();
            }
        }

        public System.Data.Linq.Table<Related> Relateds
        {
            get
            {
                return this.GetTable<Related>();
            }
        }

        public System.Data.Linq.Table<TICMappings> TICMappings
        {
            get
            {
                return this.GetTable<TICMappings>();
            }
        }

        public System.Data.Linq.Table<BaselineSecurityMapping> BaselineSecurityMappings
        {
            get
            {
                return this.GetTable<BaselineSecurityMapping>();
            }
        }
    }
}

namespace Context
{

    /// <summary>
    /// Teh primary key of the  capability
    /// </summary>
    [Table(Name = @"dbo.Capabilities")]
    public partial class Capabilities : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private string _Domain;

        private string _Container;

        private string _Capability;

        private string _Capability2;

        private string _UniqueId;

        private string _Description;

        private string _CSADescription;

        private string _Notes;

        private string _Scopes;

        private uint _C;

        private uint _I;

        private uint _A;

        private string _ResponsibilityVector;

        private string _OtherActors;
        #pragma warning restore 0649

        private EntitySet<TICMappings> _TICMappings;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnDomainChanging(string value);
        partial void OnDomainChanged();
        partial void OnContainerChanging(string value);
        partial void OnContainerChanged();
        partial void OnCapabilityChanging(string value);
        partial void OnCapabilityChanged();
        partial void OnCapability2Changing(string value);
        partial void OnCapability2Changed();
        partial void OnUniqueIdChanging(string value);
        partial void OnUniqueIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCSADescriptionChanging(string value);
        partial void OnCSADescriptionChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnScopesChanging(string value);
        partial void OnScopesChanged();
        partial void OnCChanging(uint value);
        partial void OnCChanged();
        partial void OnIChanging(uint value);
        partial void OnIChanged();
        partial void OnAChanging(uint value);
        partial void OnAChanged();
        partial void OnResponsibilityVectorChanging(string value);
        partial void OnResponsibilityVectorChanged();
        partial void OnOtherActorsChanging(string value);
        partial void OnOtherActorsChanged();
        #endregion

        public Capabilities()
        {
            this._TICMappings = new EntitySet<TICMappings>(new Action<TICMappings>(this.attach_TICMappings), new Action<TICMappings>(this.detach_TICMappings));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Domain in the schema.
        /// </summary>
        [Column(Storage = "_Domain", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Domain
        {
            get
            {
                return this._Domain;
            }
            set
            {
                if (this._Domain != value)
                {
                    this.OnDomainChanging(value);
                    this.SendPropertyChanging();
                    this._Domain = value;
                    this.SendPropertyChanged("Domain");
                    this.OnDomainChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Container in the schema.
        /// </summary>
        [Column(Storage = "_Container", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Container
        {
            get
            {
                return this._Container;
            }
            set
            {
                if (this._Container != value)
                {
                    this.OnContainerChanging(value);
                    this.SendPropertyChanging();
                    this._Container = value;
                    this.SendPropertyChanged("Container");
                    this.OnContainerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Capability in the schema.
        /// </summary>
        [Column(Storage = "_Capability", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Capability
        {
            get
            {
                return this._Capability;
            }
            set
            {
                if (this._Capability != value)
                {
                    this.OnCapabilityChanging(value);
                    this.SendPropertyChanging();
                    this._Capability = value;
                    this.SendPropertyChanged("Capability");
                    this.OnCapabilityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Capability2 in the schema.
        /// </summary>
        [Column(Storage = "_Capability2", DbType = "varchar(8000)")]
        public string Capability2
        {
            get
            {
                return this._Capability2;
            }
            set
            {
                if (this._Capability2 != value)
                {
                    this.OnCapability2Changing(value);
                    this.SendPropertyChanging();
                    this._Capability2 = value;
                    this.SendPropertyChanged("Capability2");
                    this.OnCapability2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UniqueId in the schema.
        /// </summary>
        [Column(Storage = "_UniqueId", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string UniqueId
        {
            get
            {
                return this._UniqueId;
            }
            set
            {
                if (this._UniqueId != value)
                {
                    this.OnUniqueIdChanging(value);
                    this.SendPropertyChanging();
                    this._UniqueId = value;
                    this.SendPropertyChanged("UniqueId");
                    this.OnUniqueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CSADescription in the schema.
        /// </summary>
        [Column(Storage = "_CSADescription", DbType = "varchar(8000)")]
        public string CSADescription
        {
            get
            {
                return this._CSADescription;
            }
            set
            {
                if (this._CSADescription != value)
                {
                    this.OnCSADescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._CSADescription = value;
                    this.SendPropertyChanged("CSADescription");
                    this.OnCSADescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Storage = "_Notes", DbType = "varchar(8000)")]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging();
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Scopes in the schema.
        /// </summary>
        [Column(Storage = "_Scopes", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Scopes
        {
            get
            {
                return this._Scopes;
            }
            set
            {
                if (this._Scopes != value)
                {
                    this.OnScopesChanging(value);
                    this.SendPropertyChanging();
                    this._Scopes = value;
                    this.SendPropertyChanged("Scopes");
                    this.OnScopesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for C in the schema.
        /// </summary>
        [Column(Storage = "_C", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint C
        {
            get
            {
                return this._C;
            }
            set
            {
                if (this._C != value)
                {
                    this.OnCChanging(value);
                    this.SendPropertyChanging();
                    this._C = value;
                    this.SendPropertyChanged("C");
                    this.OnCChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for I in the schema.
        /// </summary>
        [Column(Storage = "_I", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint I
        {
            get
            {
                return this._I;
            }
            set
            {
                if (this._I != value)
                {
                    this.OnIChanging(value);
                    this.SendPropertyChanging();
                    this._I = value;
                    this.SendPropertyChanged("I");
                    this.OnIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for A in the schema.
        /// </summary>
        [Column(Storage = "_A", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint A
        {
            get
            {
                return this._A;
            }
            set
            {
                if (this._A != value)
                {
                    this.OnAChanging(value);
                    this.SendPropertyChanging();
                    this._A = value;
                    this.SendPropertyChanged("A");
                    this.OnAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ResponsibilityVector in the schema.
        /// </summary>
        [Column(Storage = "_ResponsibilityVector", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string ResponsibilityVector
        {
            get
            {
                return this._ResponsibilityVector;
            }
            set
            {
                if (this._ResponsibilityVector != value)
                {
                    this.OnResponsibilityVectorChanging(value);
                    this.SendPropertyChanging();
                    this._ResponsibilityVector = value;
                    this.SendPropertyChanged("ResponsibilityVector");
                    this.OnResponsibilityVectorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtherActors in the schema.
        /// </summary>
        [Column(Storage = "_OtherActors", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string OtherActors
        {
            get
            {
                return this._OtherActors;
            }
            set
            {
                if (this._OtherActors != value)
                {
                    this.OnOtherActorsChanging(value);
                    this.SendPropertyChanging();
                    this._OtherActors = value;
                    this.SendPropertyChanged("OtherActors");
                    this.OnOtherActorsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TICMappings in the schema.
        /// </summary>
        [Association(Name="Capabilities_TICMappings", Storage="_TICMappings", ThisKey="Id", OtherKey="CapabilityId")]
        public EntitySet<TICMappings> TICMappings
        {
            get
            {
                return this._TICMappings;
            }
            set
            {
                this._TICMappings.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TICMappings(TICMappings entity)
        {
            this.SendPropertyChanging();
            entity.Capabilities1 = this;
        }
    
        private void detach_TICMappings(TICMappings entity)
        {
            this.SendPropertyChanging();
            entity.Capabilities1 = null;
        }
    }

    /// <summary>
    /// There are no comments for Context.Controls in the schema.
    /// </summary>
    [Table(Name = @"dbo.Controls")]
    public partial class Controls : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private string _Name;

        private uint _BaselineID;

        private uint _FamilyId;

        private uint _PriorityId;

        private string _Description;

        private string _Guidance;
        #pragma warning restore 0649

        private EntityRef<Families> _Families;

        private EntityRef<Priorities> _Priorities;

        private EntityRef<Baselines> _Baselines;

        private EntitySet<Specs> _Specs;

        private EntitySet<Related> _Parent;

        private EntitySet<BaselineSecurityMapping> _BaselineSecurityMappings;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnBaselineIDChanging(uint value);
        partial void OnBaselineIDChanged();
        partial void OnFamilyIdChanging(uint value);
        partial void OnFamilyIdChanged();
        partial void OnPriorityIdChanging(uint value);
        partial void OnPriorityIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGuidanceChanging(string value);
        partial void OnGuidanceChanged();
        #endregion

        public Controls()
        {
            this._Families  = default(EntityRef<Families>);
            this._Priorities  = default(EntityRef<Priorities>);
            this._Baselines  = default(EntityRef<Baselines>);
            this._Specs = new EntitySet<Specs>(new Action<Specs>(this.attach_Specs), new Action<Specs>(this.detach_Specs));
            this._Parent = new EntitySet<Related>(new Action<Related>(this.attach_Parent), new Action<Related>(this.detach_Parent));
            this._BaselineSecurityMappings = new EntitySet<BaselineSecurityMapping>(new Action<BaselineSecurityMapping>(this.attach_BaselineSecurityMappings), new Action<BaselineSecurityMapping>(this.detach_BaselineSecurityMappings));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaselineID in the schema.
        /// </summary>
        [Column(Storage = "_BaselineID", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint BaselineID
        {
            get
            {
                return this._BaselineID;
            }
            set
            {
                if (this._BaselineID != value)
                {
                    if (this._Baselines.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBaselineIDChanging(value);
                    this.SendPropertyChanging();
                    this._BaselineID = value;
                    this.SendPropertyChanged("BaselineID");
                    this.OnBaselineIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FamilyId in the schema.
        /// </summary>
        [Column(Storage = "_FamilyId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint FamilyId
        {
            get
            {
                return this._FamilyId;
            }
            set
            {
                if (this._FamilyId != value)
                {
                    if (this._Families.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFamilyIdChanging(value);
                    this.SendPropertyChanging();
                    this._FamilyId = value;
                    this.SendPropertyChanged("FamilyId");
                    this.OnFamilyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PriorityId in the schema.
        /// </summary>
        [Column(Storage = "_PriorityId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint PriorityId
        {
            get
            {
                return this._PriorityId;
            }
            set
            {
                if (this._PriorityId != value)
                {
                    if (this._Priorities.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPriorityIdChanging(value);
                    this.SendPropertyChanging();
                    this._PriorityId = value;
                    this.SendPropertyChanged("PriorityId");
                    this.OnPriorityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Guidance in the schema.
        /// </summary>
        [Column(Storage = "_Guidance", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Guidance
        {
            get
            {
                return this._Guidance;
            }
            set
            {
                if (this._Guidance != value)
                {
                    this.OnGuidanceChanging(value);
                    this.SendPropertyChanging();
                    this._Guidance = value;
                    this.SendPropertyChanged("Guidance");
                    this.OnGuidanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Families in the schema.
        /// </summary>
        [Association(Name="Families_Controls", Storage="_Families", ThisKey="FamilyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Families Families
        {
            get
            {
                return this._Families.Entity;
            }
            set
            {
                Families previousValue = this._Families.Entity;
                if ((previousValue != value) || (this._Families.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Families.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._Families.Entity = value;
                    if (value != null)
                    {
                        this._FamilyId = value.Id;
                        value.Controls.Add(this);
                    }
                    else
                    {
                        this._FamilyId = default(uint);
                    }
                    this.SendPropertyChanged("Families");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Priorities in the schema.
        /// </summary>
        [Association(Name="Priorities_Controls", Storage="_Priorities", ThisKey="PriorityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Priorities Priorities
        {
            get
            {
                return this._Priorities.Entity;
            }
            set
            {
                Priorities previousValue = this._Priorities.Entity;
                if ((previousValue != value) || (this._Priorities.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Priorities.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._Priorities.Entity = value;
                    if (value != null)
                    {
                        this._PriorityId = value.Id;
                        value.Controls.Add(this);
                    }
                    else
                    {
                        this._PriorityId = default(uint);
                    }
                    this.SendPropertyChanged("Priorities");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Baselines in the schema.
        /// </summary>
        [Association(Name="Baselines_Controls", Storage="_Baselines", ThisKey="BaselineID", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Baselines Baselines
        {
            get
            {
                return this._Baselines.Entity;
            }
            set
            {
                Baselines previousValue = this._Baselines.Entity;
                if ((previousValue != value) || (this._Baselines.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Baselines.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._Baselines.Entity = value;
                    if (value != null)
                    {
                        this._BaselineID = value.Id;
                        value.Controls.Add(this);
                    }
                    else
                    {
                        this._BaselineID = default(uint);
                    }
                    this.SendPropertyChanged("Baselines");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specs in the schema.
        /// </summary>
        [Association(Name="Controls_Specs", Storage="_Specs", ThisKey="Id", OtherKey="ControId")]
        public EntitySet<Specs> Specs
        {
            get
            {
                return this._Specs;
            }
            set
            {
                this._Specs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Parent in the schema.
        /// </summary>
        [Association(Name="Controls_Related", Storage="_Parent", ThisKey="Id", OtherKey="ParentId")]
        public EntitySet<Related> Parent
        {
            get
            {
                return this._Parent;
            }
            set
            {
                this._Parent.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for BaselineSecurityMappings in the schema.
        /// </summary>
        [Association(Name="Controls_BaselineSecurityMapping", Storage="_BaselineSecurityMappings", ThisKey="Id", OtherKey="ControlsId")]
        public EntitySet<BaselineSecurityMapping> BaselineSecurityMappings
        {
            get
            {
                return this._BaselineSecurityMappings;
            }
            set
            {
                this._BaselineSecurityMappings.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Specs(Specs entity)
        {
            this.SendPropertyChanging();
            entity.Controls = this;
        }
    
        private void detach_Specs(Specs entity)
        {
            this.SendPropertyChanging();
            entity.Controls = null;
        }

        private void attach_Parent(Related entity)
        {
            this.SendPropertyChanging();
            entity.RelatedParent = this;
        }
    
        private void detach_Parent(Related entity)
        {
            this.SendPropertyChanging();
            entity.RelatedParent = null;
        }

        private void attach_BaselineSecurityMappings(BaselineSecurityMapping entity)
        {
            this.SendPropertyChanging();
            entity.Controls = this;
        }
    
        private void detach_BaselineSecurityMappings(BaselineSecurityMapping entity)
        {
            this.SendPropertyChanging();
            entity.Controls = null;
        }
    }

    /// <summary>
    /// There are no comments for Context.MapTypesCapabilitiesControls in the schema.
    /// </summary>
    [Table(Name = @"dbo.MapTypesCapabilitiesControls")]
    public partial class MapTypesCapabilitiesControls : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private uint _CapabilitiesId;

        private uint _ControlsId;

        private uint _MapTypesId;

        private uint _specId;

        private bool _isControlMap;
        #pragma warning restore 0649

        private EntityRef<Capabilities> _CapabilitiesImplementation;

        private EntityRef<Controls> _ControlsImplementation;

        private EntityRef<Specs> _Specs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnCapabilitiesIdChanging(uint value);
        partial void OnCapabilitiesIdChanged();
        partial void OnControlsIdChanging(uint value);
        partial void OnControlsIdChanged();
        partial void OnMapTypesIdChanging(uint value);
        partial void OnMapTypesIdChanged();
        partial void OnspecIdChanging(uint value);
        partial void OnspecIdChanged();
        partial void OnisControlMapChanging(bool value);
        partial void OnisControlMapChanged();
        #endregion

        public MapTypesCapabilitiesControls()
        {
            this._CapabilitiesImplementation  = default(EntityRef<Capabilities>);
            this._ControlsImplementation  = default(EntityRef<Controls>);
            this._Specs  = default(EntityRef<Specs>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CapabilitiesId in the schema.
        /// </summary>
        [Column(Storage = "_CapabilitiesId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint CapabilitiesId
        {
            get
            {
                return this._CapabilitiesId;
            }
            set
            {
                if (this._CapabilitiesId != value)
                {
                    if (this._CapabilitiesImplementation.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCapabilitiesIdChanging(value);
                    this.SendPropertyChanging();
                    this._CapabilitiesId = value;
                    this.SendPropertyChanged("CapabilitiesId");
                    this.OnCapabilitiesIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlsId in the schema.
        /// </summary>
        [Column(Storage = "_ControlsId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint ControlsId
        {
            get
            {
                return this._ControlsId;
            }
            set
            {
                if (this._ControlsId != value)
                {
                    if (this._ControlsImplementation.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnControlsIdChanging(value);
                    this.SendPropertyChanging();
                    this._ControlsId = value;
                    this.SendPropertyChanged("ControlsId");
                    this.OnControlsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MapTypesId in the schema.
        /// </summary>
        [Column(Storage = "_MapTypesId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint MapTypesId
        {
            get
            {
                return this._MapTypesId;
            }
            set
            {
                if (this._MapTypesId != value)
                {
                    this.OnMapTypesIdChanging(value);
                    this.SendPropertyChanging();
                    this._MapTypesId = value;
                    this.SendPropertyChanged("MapTypesId");
                    this.OnMapTypesIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for specId in the schema.
        /// </summary>
        [Column(Storage = "_specId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint specId
        {
            get
            {
                return this._specId;
            }
            set
            {
                if (this._specId != value)
                {
                    if (this._Specs.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnspecIdChanging(value);
                    this.SendPropertyChanging();
                    this._specId = value;
                    this.SendPropertyChanged("specId");
                    this.OnspecIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for isControlMap in the schema.
        /// </summary>
        [Column(Storage = "_isControlMap", CanBeNull = false, DbType = "bit NOT NULL")]
        public bool isControlMap
        {
            get
            {
                return this._isControlMap;
            }
            set
            {
                if (this._isControlMap != value)
                {
                    this.OnisControlMapChanging(value);
                    this.SendPropertyChanging();
                    this._isControlMap = value;
                    this.SendPropertyChanged("isControlMap");
                    this.OnisControlMapChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CapabilitiesImplementation in the schema.
        /// </summary>
        [Association(Name="Capabilities_MapTypesCapabilitiesControls", Storage="_CapabilitiesImplementation", ThisKey="CapabilitiesId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Capabilities CapabilitiesImplementation
        {
            get
            {
                return this._CapabilitiesImplementation.Entity;
            }
            set
            {
                Capabilities previousValue = this._CapabilitiesImplementation.Entity;
                if ((previousValue != value) || (this._CapabilitiesImplementation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CapabilitiesImplementation.Entity = null;
                    }
                    this._CapabilitiesImplementation.Entity = value;
                    if (value != null)
                    {
                        this._CapabilitiesId = value.Id;
                    }
                    else
                    {
                        this._CapabilitiesId = default(uint);
                    }
                    this.SendPropertyChanged("CapabilitiesImplementation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlsImplementation in the schema.
        /// </summary>
        [Association(Name="Controls_MapTypesCapabilitiesControls", Storage="_ControlsImplementation", ThisKey="ControlsId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Controls ControlsImplementation
        {
            get
            {
                return this._ControlsImplementation.Entity;
            }
            set
            {
                Controls previousValue = this._ControlsImplementation.Entity;
                if ((previousValue != value) || (this._ControlsImplementation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ControlsImplementation.Entity = null;
                    }
                    this._ControlsImplementation.Entity = value;
                    if (value != null)
                    {
                        this._ControlsId = value.Id;
                    }
                    else
                    {
                        this._ControlsId = default(uint);
                    }
                    this.SendPropertyChanged("ControlsImplementation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specs in the schema.
        /// </summary>
        [Association(Name="Specs_MapTypesCapabilitiesControls", Storage="_Specs", ThisKey="specId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Specs Specs
        {
            get
            {
                return this._Specs.Entity;
            }
            set
            {
                Specs previousValue = this._Specs.Entity;
                if ((previousValue != value) || (this._Specs.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Specs.Entity = null;
                        previousValue.MapTypesCapabilitiesControls.Remove(this);
                    }
                    this._Specs.Entity = value;
                    if (value != null)
                    {
                        this._specId = value.Id;
                        value.MapTypesCapabilitiesControls.Add(this);
                    }
                    else
                    {
                        this._specId = default(uint);
                    }
                    this.SendPropertyChanged("Specs");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.Families in the schema.
    /// </summary>
    [Table(Name = @"dbo.Families")]
    public partial class Families : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private string _Name;

        private string _Description;
        #pragma warning restore 0649

        private EntitySet<Controls> _Controls;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Families()
        {
            this._Controls = new EntitySet<Controls>(new Action<Controls>(this.attach_Controls), new Action<Controls>(this.detach_Controls));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "varchar(8000)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Controls in the schema.
        /// </summary>
        [Association(Name="Families_Controls", Storage="_Controls", ThisKey="Id", OtherKey="FamilyId")]
        public EntitySet<Controls> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Controls(Controls entity)
        {
            this.SendPropertyChanging();
            entity.Families = this;
        }
    
        private void detach_Controls(Controls entity)
        {
            this.SendPropertyChanging();
            entity.Families = null;
        }
    }

    /// <summary>
    /// There are no comments for Context.Priorities in the schema.
    /// </summary>
    [Table(Name = @"dbo.Priorities")]
    public partial class Priorities : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private string _Name;

        private string _Description;
        #pragma warning restore 0649

        private EntitySet<Controls> _Controls;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Priorities()
        {
            this._Controls = new EntitySet<Controls>(new Action<Controls>(this.attach_Controls), new Action<Controls>(this.detach_Controls));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "varchar(8000)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Controls in the schema.
        /// </summary>
        [Association(Name="Priorities_Controls", Storage="_Controls", ThisKey="Id", OtherKey="PriorityId")]
        public EntitySet<Controls> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Controls(Controls entity)
        {
            this.SendPropertyChanging();
            entity.Priorities = this;
        }
    
        private void detach_Controls(Controls entity)
        {
            this.SendPropertyChanging();
            entity.Priorities = null;
        }
    }

    /// <summary>
    /// There are no comments for Context.Baselines in the schema.
    /// </summary>
    [Table(Name = @"dbo.Baselines")]
    public partial class Baselines : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private bool _ImpactLow;

        private bool _ImpactModerate;

        private bool _ImpactHigh;

        private string _Description;
        #pragma warning restore 0649

        private EntitySet<Controls> _Controls;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnImpactLowChanging(bool value);
        partial void OnImpactLowChanged();
        partial void OnImpactModerateChanging(bool value);
        partial void OnImpactModerateChanged();
        partial void OnImpactHighChanging(bool value);
        partial void OnImpactHighChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Baselines()
        {
            this._Controls = new EntitySet<Controls>(new Action<Controls>(this.attach_Controls), new Action<Controls>(this.detach_Controls));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImpactLow in the schema.
        /// </summary>
        [Column(Storage = "_ImpactLow", CanBeNull = false, DbType = "bit NOT NULL")]
        public bool ImpactLow
        {
            get
            {
                return this._ImpactLow;
            }
            set
            {
                if (this._ImpactLow != value)
                {
                    this.OnImpactLowChanging(value);
                    this.SendPropertyChanging();
                    this._ImpactLow = value;
                    this.SendPropertyChanged("ImpactLow");
                    this.OnImpactLowChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImpactModerate in the schema.
        /// </summary>
        [Column(Storage = "_ImpactModerate", CanBeNull = false, DbType = "bit NOT NULL")]
        public bool ImpactModerate
        {
            get
            {
                return this._ImpactModerate;
            }
            set
            {
                if (this._ImpactModerate != value)
                {
                    this.OnImpactModerateChanging(value);
                    this.SendPropertyChanging();
                    this._ImpactModerate = value;
                    this.SendPropertyChanged("ImpactModerate");
                    this.OnImpactModerateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImpactHigh in the schema.
        /// </summary>
        [Column(Storage = "_ImpactHigh", CanBeNull = false, DbType = "bit NOT NULL")]
        public bool ImpactHigh
        {
            get
            {
                return this._ImpactHigh;
            }
            set
            {
                if (this._ImpactHigh != value)
                {
                    this.OnImpactHighChanging(value);
                    this.SendPropertyChanging();
                    this._ImpactHigh = value;
                    this.SendPropertyChanged("ImpactHigh");
                    this.OnImpactHighChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Controls in the schema.
        /// </summary>
        [Association(Name="Baselines_Controls", Storage="_Controls", ThisKey="Id", OtherKey="BaselineID")]
        public EntitySet<Controls> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Controls(Controls entity)
        {
            this.SendPropertyChanging();
            entity.Baselines = this;
        }
    
        private void detach_Controls(Controls entity)
        {
            this.SendPropertyChanging();
            entity.Baselines = null;
        }
    }

    /// <summary>
    /// There are no comments for Context.Specs in the schema.
    /// </summary>
    [Table(Name = @"dbo.Specs")]
    public partial class Specs : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private uint _ControId;

        private string _SpecificationlName;

        private string _Description;

        private string _Guidance;
        #pragma warning restore 0649

        private EntityRef<Controls> _Controls;

        private EntitySet<MapTypesCapabilitiesControls> _MapTypesCapabilitiesControls;

        private EntitySet<BaselineSecurityMapping> _BaselineSecurityMappings;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnControIdChanging(uint value);
        partial void OnControIdChanged();
        partial void OnSpecificationlNameChanging(string value);
        partial void OnSpecificationlNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGuidanceChanging(string value);
        partial void OnGuidanceChanged();
        #endregion

        public Specs()
        {
            this._Controls  = default(EntityRef<Controls>);
            this._MapTypesCapabilitiesControls = new EntitySet<MapTypesCapabilitiesControls>(new Action<MapTypesCapabilitiesControls>(this.attach_MapTypesCapabilitiesControls), new Action<MapTypesCapabilitiesControls>(this.detach_MapTypesCapabilitiesControls));
            this._BaselineSecurityMappings = new EntitySet<BaselineSecurityMapping>(new Action<BaselineSecurityMapping>(this.attach_BaselineSecurityMappings), new Action<BaselineSecurityMapping>(this.detach_BaselineSecurityMappings));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControId in the schema.
        /// </summary>
        [Column(Storage = "_ControId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint ControId
        {
            get
            {
                return this._ControId;
            }
            set
            {
                if (this._ControId != value)
                {
                    if (this._Controls.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnControIdChanging(value);
                    this.SendPropertyChanging();
                    this._ControId = value;
                    this.SendPropertyChanged("ControId");
                    this.OnControIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecificationlName in the schema.
        /// </summary>
        [Column(Storage = "_SpecificationlName", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string SpecificationlName
        {
            get
            {
                return this._SpecificationlName;
            }
            set
            {
                if (this._SpecificationlName != value)
                {
                    this.OnSpecificationlNameChanging(value);
                    this.SendPropertyChanging();
                    this._SpecificationlName = value;
                    this.SendPropertyChanged("SpecificationlName");
                    this.OnSpecificationlNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Guidance in the schema.
        /// </summary>
        [Column(Storage = "_Guidance", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string Guidance
        {
            get
            {
                return this._Guidance;
            }
            set
            {
                if (this._Guidance != value)
                {
                    this.OnGuidanceChanging(value);
                    this.SendPropertyChanging();
                    this._Guidance = value;
                    this.SendPropertyChanged("Guidance");
                    this.OnGuidanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Controls in the schema.
        /// </summary>
        [Association(Name="Controls_Specs", Storage="_Controls", ThisKey="ControId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Controls Controls
        {
            get
            {
                return this._Controls.Entity;
            }
            set
            {
                Controls previousValue = this._Controls.Entity;
                if ((previousValue != value) || (this._Controls.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Controls.Entity = null;
                        previousValue.Specs.Remove(this);
                    }
                    this._Controls.Entity = value;
                    if (value != null)
                    {
                        this._ControId = value.Id;
                        value.Specs.Add(this);
                    }
                    else
                    {
                        this._ControId = default(uint);
                    }
                    this.SendPropertyChanged("Controls");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MapTypesCapabilitiesControls in the schema.
        /// </summary>
        [Association(Name="Specs_MapTypesCapabilitiesControls", Storage="_MapTypesCapabilitiesControls", ThisKey="Id", OtherKey="specId")]
        public EntitySet<MapTypesCapabilitiesControls> MapTypesCapabilitiesControls
        {
            get
            {
                return this._MapTypesCapabilitiesControls;
            }
            set
            {
                this._MapTypesCapabilitiesControls.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for BaselineSecurityMappings in the schema.
        /// </summary>
        [Association(Name="Specs_BaselineSecurityMapping", Storage="_BaselineSecurityMappings", ThisKey="Id", OtherKey="SpecsId")]
        public EntitySet<BaselineSecurityMapping> BaselineSecurityMappings
        {
            get
            {
                return this._BaselineSecurityMappings;
            }
            set
            {
                this._BaselineSecurityMappings.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_MapTypesCapabilitiesControls(MapTypesCapabilitiesControls entity)
        {
            this.SendPropertyChanging();
            entity.Specs = this;
        }
    
        private void detach_MapTypesCapabilitiesControls(MapTypesCapabilitiesControls entity)
        {
            this.SendPropertyChanging();
            entity.Specs = null;
        }

        private void attach_BaselineSecurityMappings(BaselineSecurityMapping entity)
        {
            this.SendPropertyChanging();
            entity.Specs = this;
        }
    
        private void detach_BaselineSecurityMappings(BaselineSecurityMapping entity)
        {
            this.SendPropertyChanging();
            entity.Specs = null;
        }
    }

    /// <summary>
    /// There are no comments for Context.Related in the schema.
    /// </summary>
    [Table(Name = @"dbo.Relateds")]
    public partial class Related : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private uint _ParentId;

        private uint _ChildId;
        #pragma warning restore 0649

        private EntityRef<Controls> _RelatedParent;

        private EntityRef<Controls> _IsChild;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnParentIdChanging(uint value);
        partial void OnParentIdChanged();
        partial void OnChildIdChanging(uint value);
        partial void OnChildIdChanged();
        #endregion

        public Related()
        {
            this._RelatedParent  = default(EntityRef<Controls>);
            this._IsChild  = default(EntityRef<Controls>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Storage = "_ParentId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    if (this._RelatedParent.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChildId in the schema.
        /// </summary>
        [Column(Storage = "_ChildId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint ChildId
        {
            get
            {
                return this._ChildId;
            }
            set
            {
                if (this._ChildId != value)
                {
                    if (this._IsChild.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnChildIdChanging(value);
                    this.SendPropertyChanging();
                    this._ChildId = value;
                    this.SendPropertyChanged("ChildId");
                    this.OnChildIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RelatedParent in the schema.
        /// </summary>
        [Association(Name="Controls_Related", Storage="_RelatedParent", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Controls RelatedParent
        {
            get
            {
                return this._RelatedParent.Entity;
            }
            set
            {
                Controls previousValue = this._RelatedParent.Entity;
                if ((previousValue != value) || (this._RelatedParent.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._RelatedParent.Entity = null;
                        previousValue.Parent.Remove(this);
                    }
                    this._RelatedParent.Entity = value;
                    if (value != null)
                    {
                        this._ParentId = value.Id;
                        value.Parent.Add(this);
                    }
                    else
                    {
                        this._ParentId = default(uint);
                    }
                    this.SendPropertyChanged("RelatedParent");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsChild in the schema.
        /// </summary>
        [Association(Name="Controls_Related1", Storage="_IsChild", ThisKey="ChildId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Controls IsChild
        {
            get
            {
                return this._IsChild.Entity;
            }
            set
            {
                Controls previousValue = this._IsChild.Entity;
                if ((previousValue != value) || (this._IsChild.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._IsChild.Entity = null;
                    }
                    this._IsChild.Entity = value;
                    if (value != null)
                    {
                        this._ChildId = value.Id;
                    }
                    else
                    {
                        this._ChildId = default(uint);
                    }
                    this.SendPropertyChanged("IsChild");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.TICMappings in the schema.
    /// </summary>
    [Table(Name = @"dbo.TICMappings")]
    public partial class TICMappings : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private uint _CapabilityId;

        private string _TICName;
        #pragma warning restore 0649

        private EntityRef<Capabilities> _Capabilities1;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnCapabilityIdChanging(uint value);
        partial void OnCapabilityIdChanged();
        partial void OnTICNameChanging(string value);
        partial void OnTICNameChanged();
        #endregion

        public TICMappings()
        {
            this._Capabilities1  = default(EntityRef<Capabilities>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CapabilityId in the schema.
        /// </summary>
        [Column(Storage = "_CapabilityId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint CapabilityId
        {
            get
            {
                return this._CapabilityId;
            }
            set
            {
                if (this._CapabilityId != value)
                {
                    if (this._Capabilities1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCapabilityIdChanging(value);
                    this.SendPropertyChanging();
                    this._CapabilityId = value;
                    this.SendPropertyChanged("CapabilityId");
                    this.OnCapabilityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TICName in the schema.
        /// </summary>
        [Column(Storage = "_TICName", CanBeNull = false, DbType = "varchar(8000) NOT NULL")]
        public string TICName
        {
            get
            {
                return this._TICName;
            }
            set
            {
                if (this._TICName != value)
                {
                    this.OnTICNameChanging(value);
                    this.SendPropertyChanging();
                    this._TICName = value;
                    this.SendPropertyChanged("TICName");
                    this.OnTICNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Capabilities1 in the schema.
        /// </summary>
        [Association(Name="Capabilities_TICMappings", Storage="_Capabilities1", ThisKey="CapabilityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Capabilities Capabilities1
        {
            get
            {
                return this._Capabilities1.Entity;
            }
            set
            {
                Capabilities previousValue = this._Capabilities1.Entity;
                if ((previousValue != value) || (this._Capabilities1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Capabilities1.Entity = null;
                        previousValue.TICMappings.Remove(this);
                    }
                    this._Capabilities1.Entity = value;
                    if (value != null)
                    {
                        this._CapabilityId = value.Id;
                        value.TICMappings.Add(this);
                    }
                    else
                    {
                        this._CapabilityId = default(uint);
                    }
                    this.SendPropertyChanged("Capabilities1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.BaselineSecurityMapping in the schema.
    /// </summary>
    [Table(Name = @"dbo.BaselineSecurityMappings")]
    public partial class BaselineSecurityMapping : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _Id;

        private uint _Level;

        private uint _BaselineAuthor;

        private bool _IsControlMap;

        private uint _SpecsId;

        private uint _ControlsId;
        #pragma warning restore 0649

        private EntityRef<Controls> _Controls;

        private EntityRef<Specs> _Specs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(uint value);
        partial void OnIdChanged();
        partial void OnLevelChanging(uint value);
        partial void OnLevelChanged();
        partial void OnBaselineAuthorChanging(uint value);
        partial void OnBaselineAuthorChanged();
        partial void OnIsControlMapChanging(bool value);
        partial void OnIsControlMapChanged();
        partial void OnSpecsIdChanging(uint value);
        partial void OnSpecsIdChanged();
        partial void OnControlsIdChanging(uint value);
        partial void OnControlsIdChanged();
        #endregion

        public BaselineSecurityMapping()
        {
            this._Controls  = default(EntityRef<Controls>);
            this._Specs  = default(EntityRef<Specs>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public uint Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [Column(Storage = "_Level", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this.SendPropertyChanging();
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaselineAuthor in the schema.
        /// </summary>
        [Column(Storage = "_BaselineAuthor", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint BaselineAuthor
        {
            get
            {
                return this._BaselineAuthor;
            }
            set
            {
                if (this._BaselineAuthor != value)
                {
                    this.OnBaselineAuthorChanging(value);
                    this.SendPropertyChanging();
                    this._BaselineAuthor = value;
                    this.SendPropertyChanged("BaselineAuthor");
                    this.OnBaselineAuthorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsControlMap in the schema.
        /// </summary>
        [Column(Storage = "_IsControlMap", CanBeNull = false, DbType = "bit NOT NULL")]
        public bool IsControlMap
        {
            get
            {
                return this._IsControlMap;
            }
            set
            {
                if (this._IsControlMap != value)
                {
                    this.OnIsControlMapChanging(value);
                    this.SendPropertyChanging();
                    this._IsControlMap = value;
                    this.SendPropertyChanged("IsControlMap");
                    this.OnIsControlMapChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SpecsId in the schema.
        /// </summary>
        [Column(Storage = "_SpecsId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint SpecsId
        {
            get
            {
                return this._SpecsId;
            }
            set
            {
                if (this._SpecsId != value)
                {
                    if (this._Specs.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSpecsIdChanging(value);
                    this.SendPropertyChanging();
                    this._SpecsId = value;
                    this.SendPropertyChanged("SpecsId");
                    this.OnSpecsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlsId in the schema.
        /// </summary>
        [Column(Storage = "_ControlsId", CanBeNull = false, DbType = "bigint NOT NULL")]
        public uint ControlsId
        {
            get
            {
                return this._ControlsId;
            }
            set
            {
                if (this._ControlsId != value)
                {
                    if (this._Controls.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnControlsIdChanging(value);
                    this.SendPropertyChanging();
                    this._ControlsId = value;
                    this.SendPropertyChanged("ControlsId");
                    this.OnControlsIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Controls in the schema.
        /// </summary>
        [Association(Name="Controls_BaselineSecurityMapping", Storage="_Controls", ThisKey="ControlsId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Controls Controls
        {
            get
            {
                return this._Controls.Entity;
            }
            set
            {
                Controls previousValue = this._Controls.Entity;
                if ((previousValue != value) || (this._Controls.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Controls.Entity = null;
                        previousValue.BaselineSecurityMappings.Remove(this);
                    }
                    this._Controls.Entity = value;
                    if (value != null)
                    {
                        this._ControlsId = value.Id;
                        value.BaselineSecurityMappings.Add(this);
                    }
                    else
                    {
                        this._ControlsId = default(uint);
                    }
                    this.SendPropertyChanged("Controls");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Specs in the schema.
        /// </summary>
        [Association(Name="Specs_BaselineSecurityMapping", Storage="_Specs", ThisKey="SpecsId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public Specs Specs
        {
            get
            {
                return this._Specs.Entity;
            }
            set
            {
                Specs previousValue = this._Specs.Entity;
                if ((previousValue != value) || (this._Specs.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Specs.Entity = null;
                        previousValue.BaselineSecurityMappings.Remove(this);
                    }
                    this._Specs.Entity = value;
                    if (value != null)
                    {
                        this._SpecsId = value.Id;
                        value.BaselineSecurityMappings.Add(this);
                    }
                    else
                    {
                        this._SpecsId = default(uint);
                    }
                    this.SendPropertyChanged("Specs");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
