/*
 * This file is generated by jOOQ.
*/
package gov.nist.csrc.jooq;


import gov.nist.csrc.jooq.tables.Baselines;
import gov.nist.csrc.jooq.tables.Baselinesecuritymappings;
import gov.nist.csrc.jooq.tables.Capabilities;
import gov.nist.csrc.jooq.tables.Controls;
import gov.nist.csrc.jooq.tables.Families;
import gov.nist.csrc.jooq.tables.Maptypescapabilitiescontrols;
import gov.nist.csrc.jooq.tables.Priorities;
import gov.nist.csrc.jooq.tables.Relateds;
import gov.nist.csrc.jooq.tables.Specs;
import gov.nist.csrc.jooq.tables.SqliteSequence;
import gov.nist.csrc.jooq.tables.Ticmappings;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultSchema extends SchemaImpl {

    private static final long serialVersionUID = -312199377;

    /**
     * The reference instance of <code></code>
     */
    public static final DefaultSchema DEFAULT_SCHEMA = new DefaultSchema();

    /**
     * The table <code>BaselineSecurityMappings</code>.
     */
    public final Baselinesecuritymappings BASELINESECURITYMAPPINGS = gov.nist.csrc.jooq.tables.Baselinesecuritymappings.BASELINESECURITYMAPPINGS;

    /**
     * The table <code>Baselines</code>.
     */
    public final Baselines BASELINES = gov.nist.csrc.jooq.tables.Baselines.BASELINES;

    /**
     * The table <code>Capabilities</code>.
     */
    public final Capabilities CAPABILITIES = gov.nist.csrc.jooq.tables.Capabilities.CAPABILITIES;

    /**
     * The table <code>Controls</code>.
     */
    public final Controls CONTROLS = gov.nist.csrc.jooq.tables.Controls.CONTROLS;

    /**
     * The table <code>Families</code>.
     */
    public final Families FAMILIES = gov.nist.csrc.jooq.tables.Families.FAMILIES;

    /**
     * The table <code>MapTypesCapabilitiesControls</code>.
     */
    public final Maptypescapabilitiescontrols MAPTYPESCAPABILITIESCONTROLS = gov.nist.csrc.jooq.tables.Maptypescapabilitiescontrols.MAPTYPESCAPABILITIESCONTROLS;

    /**
     * The table <code>Priorities</code>.
     */
    public final Priorities PRIORITIES = gov.nist.csrc.jooq.tables.Priorities.PRIORITIES;

    /**
     * The table <code>Relateds</code>.
     */
    public final Relateds RELATEDS = gov.nist.csrc.jooq.tables.Relateds.RELATEDS;

    /**
     * The table <code>Specs</code>.
     */
    public final Specs SPECS = gov.nist.csrc.jooq.tables.Specs.SPECS;

    /**
     * The table <code>TICMappings</code>.
     */
    public final Ticmappings TICMAPPINGS = gov.nist.csrc.jooq.tables.Ticmappings.TICMAPPINGS;

    /**
     * The table <code>sqlite_sequence</code>.
     */
    public final SqliteSequence SQLITE_SEQUENCE = gov.nist.csrc.jooq.tables.SqliteSequence.SQLITE_SEQUENCE;

    /**
     * No further instances allowed
     */
    private DefaultSchema() {
        super("", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Baselinesecuritymappings.BASELINESECURITYMAPPINGS,
            Baselines.BASELINES,
            Capabilities.CAPABILITIES,
            Controls.CONTROLS,
            Families.FAMILIES,
            Maptypescapabilitiescontrols.MAPTYPESCAPABILITIESCONTROLS,
            Priorities.PRIORITIES,
            Relateds.RELATEDS,
            Specs.SPECS,
            Ticmappings.TICMAPPINGS,
            SqliteSequence.SQLITE_SEQUENCE);
    }
}
